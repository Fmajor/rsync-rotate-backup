#!/bin/bash
# both source and destination path must be WITHOUT /
sourcePath=/Volumes/4TData1/work_data/gemini
destination=/Volumes/DataBackup/backups/gemini

# remote=username@hostname #for remote
# remote=                  #for local
remote=

sshCammand=""
# 0 means no limit
cycleLimit=0

sourceName="${sourcePath##*/}"
suffix="0"
RSYNC=/usr/bin/rsync

# gnucp and rm for remote machine
#CP=/usr/local/opt/coreutils/libexec/gnubin/cp
CP=/usr/local/opt/coreutils/bin/gcp
RM=/bin/rm

#=== you should not change the things below ===

sourceName="${sourcePath##*/}"
timeStamp=`date +%Y.%m.%dT%H-%M-%S`
destinationPath=$destination/$sourceName
backupPath=$destination/backups$suffix
logFile=$destination/logs$suffix/$timeStamp.log

if [[ ! -e $sourcePath/.backupExclude ]];then
	echo "- .git" >> $sourcePath/.backupExclude
	echo "- .gg-data" >> $sourcePath/.backupExclude
	echo "- backupPush" >> $sourcePath/.backupExclude
	exit 1
fi

remoteBackup(){
	echo "remote backup"
	SSH="$sshCammand $remote"
	$SSH ls $CP >/dev/null 2>/dev/null
	if [[ $? != 0 ]]; then
		echo "no gnu cp in remote computer, exit"
		exit 1
	fi
	$SSH mkdir -p $destination
	if [[ $cycleLimit > 0 ]]; then
		num=`$SSH ls $backupPath | wc -l | sed -e 's/^[[:space:]]*//'`
		echo "backupPath:$backupPath, num:$num"
		if [[ $num -ge $cycleLimit ]];then
			echo "    cycle limit reached.. make cycle"
			oldest=`$SSH ls -rt $backupPath| grep -v "000oldest" |head -n 1`
			if [[ -n $oldest ]]; then
				echo "        oldest:$oldest"
				$SSH "echo \"$oldest\" >> $backupPath/$oldest/DirName.txt"
				$SSH $RM -rf $backupPath/000oldest
				$SSH mv $backupPath/$oldest $backupPath/000oldest
			else
				echo "error when get oldest dir, exit"
				exit 1
			fi
		fi
	fi
	echo "remote backup before sync"
	$SSH mkdir -p $backupPath/$timeStamp
	$SSH $CP -al $destinationPath $backupPath/$timeStamp/$sourceName-old
	if [[ $? == 0 ]];then
		echo "    remote backup finished"
	else
		echo "    error with remote backup, this should occur only in the first time of the backupPush"
	fi
	echo "rsync begin"
	$RSYNC --delete --backup \
		   --backup-dir=$backupPath/$timeStamp/diff \
		   --exclude-from=$sourcePath/.backupExclude \
		   -alP \
		   -e "$sshCammand" \
		   $sourcePath \
		   $remote:$destination

	$SSH $CP -al $destinationPath $backupPath/$timeStamp/$sourceName-new
	$SSH ls $backupPath/$timeStamp/diff 2>/dev/null
	if [[ $? == 0 ]]; then
		echo "add diff tool to $backupPath/$timeStamp/diff"
		cat <<-EOF > .autoBackupTemp
		#!/bin/bash
		vimdiff \$1 ../../$sourceName-new/\$1
		EOF
		$RSYNC -e "$sshCammand" .autoBackupTemp $remote:$backupPath/$timeStamp/diff/$sourceName/.diff
		rm .autoBackupTemp
		$SSH chmod +x $backupPath/$timeStamp/diff/$sourceName/.diff
	fi
}


localBackup(){
	echo "local backup"
	ls $CP >/dev/null 2>/dev/null
	if [[ $? != 0 ]]; then
		echo "no gnu cp in remote computer, exit"
		exit 1
	fi
	mkdir -p $destination
	if [[ $cycleLimit > 0 ]]; then
		num=`ls $backupPath | wc -l | sed -e 's/^[[:space:]]*//'`
		echo "backupPath:$backupPath, num:$num"
		if [[ $num -ge $cycleLimit ]];then
			echo "    cycle limit reached.. make cycle"
			oldest=`ls -rt $backupPath| grep -v "000oldest" |head -n 1`
			if [[ -n $oldest ]]; then
				echo "        oldest:$oldest"
				echo "$oldest" >> $backupPath/$oldest/DirName.txt
				$RM -rf $backupPath/000oldest
				mv $backupPath/$oldest $backupPath/000oldest
			else
				echo "error when get oldest dir, exit"
				exit 1
			fi
		fi
	fi
	echo "remote backup before sync"
	mkdir -p $backupPath/$timeStamp
	$CP -al $destinationPath $backupPath/$timeStamp/$sourceName-old
	if [[ $? == 0 ]];then
		echo "    remote backup finished"
	else
		echo "    error with remote backup, this should occur only in the first time of the backupPush"
	fi
	echo "rsync begin"
	$RSYNC --delete --backup \
		   --backup-dir=$backupPath/$timeStamp/diff \
		   --exclude-from=$sourcePath/.backupExclude \
		   -alP \
		   -e "$sshCammand" \
		   $sourcePath \
		   $destination

	$CP -al $destinationPath $backupPath/$timeStamp/$sourceName-new
	ls $backupPath/$timeStamp/diff 2>/dev/null
	if [[ $? == 0 ]]; then
		echo "add diff tool to $backupPath/$timeStamp/diff"
		cat <<-EOF > $backupPath/$timeStamp/diff/$sourceName/.diff
		#!/bin/bash
		vimdiff \$1 ../../$sourceName-new/\$1
		EOF
		chmod +x $backupPath/$timeStamp/diff/$sourceName/.diff
	fi
}

if [[ -n $remote ]]; then
	remoteBackup
	exit 0
else
	localBackup
	exit 0
fi
